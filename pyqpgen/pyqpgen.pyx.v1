cimport pyqpgen as qpgen

cdef class QP:
	cdef qpgen.PyQPgenData * data
	cdef double * target
	cdef double * x0
	cdef double * result
	cdef double * x1
	cdef int * num_iterations
	cdef int statessize
	cdef int inputssize
	cdef int datasize
	
	def __cinit__(self):
		self.data = qpgen.allocate()
				
		self.target = qpgen.target(self.data)
		self.x0 = qpgen.x0(self.data)
		self.num_iterations = qpgen.num_iterations(self.data)
		self.result = qpgen.result(self.data)
		self.x1 = qpgen.x1(self.data)
		
		self.statessize =  qpgen.NUM_STATES*qpgen.HORIZON
		self.inputssize =  qpgen.NUM_INPUTS*qpgen.HORIZON
		self.datasize = self.statessize+self.inputssize

	def __dealloc__(self):
		qpgen.deallocate(&self.data)

	def setState(self, values):		
		if len(values) != qpgen.NUM_STATES:
			raise IndexError("Size of input array does not match number of states")
		for idx in range(0,qpgen.NUM_STATES):
			self.x0[idx] = values[idx]

	def setTargetInputs(self, values):
		if len(values) != self.inputssize:
			raise IndexError("Size of input array does not match number of inputs")
		j = self.statessize
		for i in range(0,self.inputssize):
			self.target[j] = values[i]
			j += 1

	def setTargetStates(self, values):
		if len(values) != self.statessize:
			raise IndexError("Size of input array does not match number of states")
		for i in range(0,self.statessize):
			self.target[i] = values[i]

	def getControl(self):
		return [self.result[i] for i in range(self.statessize, self.statessize+qpgen.NUM_INPUTS)]
	
	def getNumberOfIterations(self):
		return self.num_iterations[0]
		
	def getX1(self):
		return [self.x1[i] for i in range(0, qpgen.NUM_STATES)]

	def run(self):
		qpgen.qp(self.result, self.num_iterations, self.target, self.x0)
		return self.getControl()
	
	def sim(self):
		qpgen.sim(self.data)
		return self.getX1()